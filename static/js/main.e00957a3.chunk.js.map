{"version":3,"sources":["utils/searchHelper.ts","variables.ts","components/SearchLink.tsx","types/Person.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","api.ts","utils/PreparedPeople.ts","components/PersonLink/PersonLink.tsx","components/PersonInfo/PersonInfo.tsx","components/PeopleList/PeopleList.tsx","components/PeoplePage.tsx","components/Navbar.tsx","components/HomePage/HomePage.tsx","components/PageNotFound/PageNotFound.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","CENTURIES","ColumsNames","SearchParameters","SearchLink","children","params","props","useSearchParams","searchParams","to","search","Sex","PeopleFilters","centuries","query","sex","setSearchParams","className","cn","Male","Female","type","placeholder","onChange","event","Query","target","map","century","includes","Centuries","ch","filter","length","href","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","slug","name","pathname","PersonInfo","personSlug","useParams","born","died","fatherName","motherName","father","mother","PeopleList","people","sort","order","getSearchColumsParams","secondClick","Sort","Order","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","get","getAll","useEffect","getPeople","currentPeople","find","getPreparedPeople","catch","finally","visiblePeople","useMemo","preperedPerson","toLowerCase","peopleCopy","isVisible","Math","ceil","personA","personB","Name","localeCompare","Born","Died","reverse","peopleLoadingError","noPeopleMessage","hasVisiblePeople","getLinkClass","isActive","classNames","Navbar","allParams","role","HomePage","PageNotFound","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e00957a3.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","export const NOT_PARENTS_NAME = '-';\nexport const CENTURIES = ['16', '17', '18', '19', '20'];\nexport const CENTURY = 100;\n\nexport enum ColumsNames {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n\nexport enum SearchParameters {\n  Query = 'query',\n  Centuries = 'centuries',\n  Sex = 'sex',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export interface Person {\n  name: string,\n  sex: string,\n  born: number,\n  died: number,\n  fatherName: string | null,\n  motherName: string | null,\n  slug: string,\n  mother?: Person,\n  father?: Person,\n}\n\nexport enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { CENTURIES, SearchParameters } from '../variables';\nimport { SearchLink } from './SearchLink';\nimport { Sex } from '../types';\n\ntype Props = {\n  centuries: string[]\n  query: string\n  sex: string\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  centuries,\n  query,\n  sex,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        [SearchParameters.Query]: event.target.value || null,\n      }),\n    );\n  }\n\n  function toggleCentury(ch: string) {\n    return centuries.includes(ch)\n      ? centuries.filter(century => century !== ch)\n      : [...centuries, ch];\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !sex })}\n          params={{ [SearchParameters.Sex]: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={cn({ 'is-active': sex === Sex.Male })}\n          params={{ [SearchParameters.Sex]: Sex.Male }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={cn({ 'is-active': sex === Sex.Female })}\n          params={{ [SearchParameters.Sex]: Sex.Female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                data-cy=\"century\"\n                className={cn('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  [SearchParameters.Centuries]: toggleCentury(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={\n                cn('button', 'is-success', {\n                  'is-outlined': centuries.length,\n                })\n              }\n              params={{ [SearchParameters.Centuries]: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const getPreparedPeople = (people: Person[]) => (\n  people.map(person => ({\n    ...person,\n    mother: people.find(({ name }) => name === person.motherName),\n    father: people.find(({ name }) => name === person.fatherName),\n  }))\n);\n","import cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person, Sex } from '../../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    slug,\n    sex,\n    name,\n  } = person;\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `../${slug}`,\n        search: searchParams.toString(),\n      }}\n      className={cn({\n        'has-text-danger': sex === Sex.Female,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { NOT_PARENTS_NAME } from '../../variables';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonInfo: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n  const {\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    father,\n    mother,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': personSlug === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NOT_PARENTS_NAME\n        )}\n      </td>\n\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NOT_PARENTS_NAME\n        )}\n      </td>\n    </tr>\n  );\n};\n","import cn from 'classnames';\nimport { Person } from '../../types';\nimport { ColumsNames, SearchParameters } from '../../variables';\nimport { PersonInfo } from '../PersonInfo';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\n\ntype Props = {\n  people: Person[],\n  sort: string,\n  order: string,\n};\n\nexport const PeopleList: React.FC<Props> = ({\n  people,\n  sort,\n  order,\n}) => {\n  function getSearchColumsParams(value: string): SearchParams {\n    const firstClick = sort !== value;\n    const secondClick = sort === value && !order;\n\n    if (firstClick) {\n      return {\n        [SearchParameters.Sort]: value,\n        [SearchParameters.Order]: null,\n      };\n    }\n\n    if (secondClick) {\n      return { [SearchParameters.Order]: 'desc' };\n    }\n\n    return {\n      [SearchParameters.Sort]: null,\n      [SearchParameters.Order]: null,\n    };\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(ColumsNames).map(([key, value]) => (\n            <th key={key}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {key}\n                <SearchLink params={getSearchColumsParams(value)}>\n                  <span className=\"icon\">\n                    <i className={cn('fas', {\n                      'fa-sort': sort !== value,\n                      'fa-sort-up': sort === value && !order,\n                      'fa-sort-down': sort === value && order,\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonInfo\n            person={person}\n            key={person.slug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople } from '../utils/PreparedPeople';\nimport { PeopleList } from './PeopleList/PeopleList';\nimport { CENTURY, ColumsNames, SearchParameters } from '../variables';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const query = searchParams.get(SearchParameters.Query) || '';\n  const centuries = searchParams.getAll(SearchParameters.Centuries) || [];\n  const sex = searchParams.get(SearchParameters.Sex) || '';\n  const sort = searchParams.get(SearchParameters.Sort) || '';\n  const order = searchParams.get(SearchParameters.Order) || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(currentPeople => {\n        setPeople(getPreparedPeople(currentPeople));\n      })\n      .catch(() => {\n        setErrorMessage(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const visiblePeople = useMemo(() => {\n    const preperedPerson = (person: string | null) => (\n      person?.toLowerCase().includes(query.toLowerCase()) || false\n    );\n\n    const peopleCopy = people.filter(person => {\n      let isVisible = true;\n\n      if (query) {\n        isVisible = isVisible\n          && (preperedPerson(person.name)\n            || preperedPerson(person.motherName)\n            || preperedPerson(person.fatherName));\n      }\n\n      if (centuries.length) {\n        isVisible = isVisible\n          && centuries.includes(`${Math.ceil(person.born / CENTURY)}`);\n      }\n\n      if (sex) {\n        isVisible = isVisible && person.sex === sex;\n      }\n\n      return isVisible;\n    });\n\n    if (sort) {\n      peopleCopy.sort((personA, personB) => {\n        switch (sort) {\n          case ColumsNames.Name:\n            return personA.name.localeCompare(personB.name);\n          case ColumsNames.Sex:\n            return personA.sex.localeCompare(personB.sex);\n          case ColumsNames.Born:\n            return personA.born - personB.born;\n          case ColumsNames.Died:\n            return personA.died - personB.died;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      peopleCopy.reverse();\n    }\n\n    return peopleCopy;\n  }, [people, query, centuries, sex, sort, order]);\n\n  const peopleLoadingError = errorMessage && !isLoading;\n  const noPeopleMessage = !people.length && !isLoading && !errorMessage;\n  const hasVisiblePeople = !isLoading && !errorMessage\n    && people.length && !visiblePeople.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters\n                centuries={centuries}\n                query={query}\n                sex={sex}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {peopleLoadingError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {noPeopleMessage && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {hasVisiblePeople && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!!visiblePeople.length && (\n                <PeopleList\n                  people={visiblePeople}\n                  sort={sort}\n                  order={order}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => classNames('navbar-item', {\n  'has-background-grey-lighter': isActive,\n});\n\nexport const Navbar = () => {\n  const [params] = useSearchParams();\n  const allParams = params.toString();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to={`/people?${allParams}`}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const PageNotFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/people\">\n              <Route path=\":personSlug?\" element={<PeoplePage />} />\n            </Route>\n            <Route path=\"*\" element={<PageNotFound />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}